/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    model: NexusPrisma<TypeName, 'model'>
    crud: any
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommentWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  FollowingWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  LikePostWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // root type
    commentId?: string | null; // String
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
  }
  Following: { // root type
    avatar: string; // String!
    followId: string; // String!
    id: string; // String!
    name: string; // String!
  }
  LikePost: { // root type
    id: string; // String!
    likedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Mutation: {};
  Post: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
  }
  PostsPayload: { // root type
    posts?: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    total?: number | null; // Int
  }
  Profile: { // root type
    avatar?: string | null; // String
    bio?: string | null; // String
    id: string; // String!
    location?: string | null; // String
    website?: string | null; // String
  }
  Query: {};
  User: { // root type
    email: string; // String!
    id: string; // String!
    name?: string | null; // String
  }
  UserPayload: { // root type
    followers?: Array<NexusGenRootTypes['Following'] | null> | null; // [Following]
    user?: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Comment: { // field return type
    commentId: string | null; // String
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Following: { // field return type
    avatar: string; // String!
    followId: string; // String!
    id: string; // String!
    name: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  LikePost: { // field return type
    id: string; // String!
    likedAt: NexusGenScalars['DateTime']; // DateTime!
    post: NexusGenRootTypes['Post']; // Post!
  }
  Mutation: { // field return type
    create_comment: NexusGenRootTypes['Comment'] | null; // Comment
    create_comment_reply: NexusGenRootTypes['Comment'] | null; // Comment
    create_post: NexusGenRootTypes['Post'] | null; // Post
    create_profile: NexusGenRootTypes['Profile'] | null; // Profile
    follow: NexusGenRootTypes['Following'] | null; // Following
    like_post: NexusGenRootTypes['LikePost'] | null; // LikePost
    login: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    unfollow: NexusGenRootTypes['Following'] | null; // Following
    unlike_post: NexusGenRootTypes['LikePost'] | null; // LikePost
    update_profile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  Post: { // field return type
    author: NexusGenRootTypes['User'] | null; // User
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    likes: NexusGenRootTypes['LikePost'][]; // [LikePost!]!
  }
  PostsPayload: { // field return type
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    total: number | null; // Int
  }
  Profile: { // field return type
    avatar: string | null; // String
    bio: string | null; // String
    id: string; // String!
    location: string | null; // String
    website: string | null; // String
  }
  Query: { // field return type
    current_user: NexusGenRootTypes['UserPayload'] | null; // UserPayload
    popular_posts: NexusGenRootTypes['Post'][]; // [Post!]!
    post: NexusGenRootTypes['Post'] | null; // Post
    posts: NexusGenRootTypes['PostsPayload']; // PostsPayload!
    search_users: NexusGenRootTypes['User'][]; // [User!]!
    user: NexusGenRootTypes['UserPayload'] | null; // UserPayload
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  User: { // field return type
    comments: NexusGenRootTypes['Comment'][]; // [Comment!]!
    email: string; // String!
    following: NexusGenRootTypes['Following'][]; // [Following!]!
    id: string; // String!
    likePosts: NexusGenRootTypes['LikePost'][]; // [LikePost!]!
    name: string | null; // String
    posts: NexusGenRootTypes['Post'][]; // [Post!]!
    profile: NexusGenRootTypes['Profile'] | null; // Profile
  }
  UserPayload: { // field return type
    followers: Array<NexusGenRootTypes['Following'] | null> | null; // [Following]
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Comment: { // field return type name
    commentId: 'String'
    comments: 'Comment'
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    user: 'User'
  }
  Following: { // field return type name
    avatar: 'String'
    followId: 'String'
    id: 'String'
    name: 'String'
    user: 'User'
  }
  LikePost: { // field return type name
    id: 'String'
    likedAt: 'DateTime'
    post: 'Post'
  }
  Mutation: { // field return type name
    create_comment: 'Comment'
    create_comment_reply: 'Comment'
    create_post: 'Post'
    create_profile: 'Profile'
    follow: 'Following'
    like_post: 'LikePost'
    login: 'AuthPayload'
    signup: 'AuthPayload'
    unfollow: 'Following'
    unlike_post: 'LikePost'
    update_profile: 'Profile'
  }
  Post: { // field return type name
    author: 'User'
    comments: 'Comment'
    content: 'String'
    createdAt: 'DateTime'
    id: 'String'
    likes: 'LikePost'
  }
  PostsPayload: { // field return type name
    posts: 'Post'
    total: 'Int'
  }
  Profile: { // field return type name
    avatar: 'String'
    bio: 'String'
    id: 'String'
    location: 'String'
    website: 'String'
  }
  Query: { // field return type name
    current_user: 'UserPayload'
    popular_posts: 'Post'
    post: 'Post'
    posts: 'PostsPayload'
    search_users: 'User'
    user: 'UserPayload'
    users: 'User'
  }
  User: { // field return type name
    comments: 'Comment'
    email: 'String'
    following: 'Following'
    id: 'String'
    likePosts: 'LikePost'
    name: 'String'
    posts: 'Post'
    profile: 'Profile'
  }
  UserPayload: { // field return type name
    followers: 'Following'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Comment: {
    comments: { // args
      after?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      before?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Mutation: {
    create_comment: { // args
      content: string; // String!
      postId: string; // String!
    }
    create_comment_reply: { // args
      commentId: string; // String!
      content: string; // String!
      postId: string; // String!
    }
    create_post: { // args
      content: string; // String!
    }
    create_profile: { // args
      avatar?: string | null; // String
      bio?: string | null; // String
      location?: string | null; // String
      website?: string | null; // String
    }
    follow: { // args
      avatar: string; // String!
      followId: string; // String!
      name: string; // String!
    }
    like_post: { // args
      id: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      name?: string | null; // String
      password: string; // String!
    }
    unfollow: { // args
      followId: string; // String!
    }
    unlike_post: { // args
      id: string; // String!
    }
    update_profile: { // args
      avatar?: string | null; // String
      bio?: string | null; // String
      id?: string | null; // String
      location?: string | null; // String
      website?: string | null; // String
    }
  }
  Post: {
    comments: { // args
      after?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      before?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    likes: { // args
      after?: NexusGenInputs['LikePostWhereUniqueInput'] | null; // LikePostWhereUniqueInput
      before?: NexusGenInputs['LikePostWhereUniqueInput'] | null; // LikePostWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    popular_posts: { // args
      minDatetime: string; // String!
    }
    post: { // args
      postId: string; // String!
    }
    posts: { // args
      skip: number; // Int!
      take: number; // Int!
    }
    search_users: { // args
      searchInput: string; // String!
    }
    user: { // args
      userId: string; // String!
    }
  }
  User: {
    comments: { // args
      after?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      before?: NexusGenInputs['CommentWhereUniqueInput'] | null; // CommentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    following: { // args
      after?: NexusGenInputs['FollowingWhereUniqueInput'] | null; // FollowingWhereUniqueInput
      before?: NexusGenInputs['FollowingWhereUniqueInput'] | null; // FollowingWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    likePosts: { // args
      after?: NexusGenInputs['LikePostWhereUniqueInput'] | null; // LikePostWhereUniqueInput
      before?: NexusGenInputs['LikePostWhereUniqueInput'] | null; // LikePostWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}