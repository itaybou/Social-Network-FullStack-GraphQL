### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Comment {
  commentId: String
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  content: String!
  createdAt: DateTime!
  id: String!
  user: User
}

input CommentWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Following {
  avatar: String!
  followId: String!
  id: String!
  name: String!
  user: User!
}

input FollowingWhereUniqueInput {
  id: String
}

type LikePost {
  id: String!
  likedAt: DateTime!
  post: Post!
}

input LikePostWhereUniqueInput {
  id: String
}

type Mutation {
  create_comment(content: String!, postId: String!): Comment
  create_comment_reply(commentId: String!, content: String!, postId: String!): Comment
  create_post(content: String!): Post
  create_profile(avatar: String, bio: String, location: String, website: String): Profile
  follow(avatar: String!, followId: String!, name: String!): Following
  like_post(id: String!): LikePost
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  unfollow(followId: String!): Following
  unlike_post(id: String!): LikePost
  update_profile(avatar: String, bio: String, id: String, location: String, website: String): Profile
}

type Post {
  author: User
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  content: String!
  createdAt: DateTime!
  id: String!
  likes(after: LikePostWhereUniqueInput, before: LikePostWhereUniqueInput, first: Int, last: Int): [LikePost!]!
}

type PostsPayload {
  posts: [Post]
  total: Int
}

type Profile {
  avatar: String
  bio: String
  id: String!
  location: String
  website: String
}

type Query {
  current_user: UserPayload
  popular_posts(minDatetime: String!): [Post!]!
  post(postId: String!): Post
  posts(skip: Int!, take: Int!): PostsPayload!
  search_users(searchInput: String!): [User!]!
  user(userId: String!): UserPayload
  users: [User!]!
}

type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  email: String!
  following(after: FollowingWhereUniqueInput, before: FollowingWhereUniqueInput, first: Int, last: Int): [Following!]!
  id: String!
  likePosts(after: LikePostWhereUniqueInput, before: LikePostWhereUniqueInput, first: Int, last: Int): [LikePost!]!
  name: String
  posts: [Post!]!
  profile: Profile
}

type UserPayload {
  followers: [Following]
  user: User
}
